# Generated by Selenium IDE
import pytest
import time
import json
from selenium import webdriver
from selenium.common.exceptions import NoSuchElementException
from selenium.webdriver.common.by import By
from selenium.webdriver.common.action_chains import ActionChains
from selenium.webdriver.support import expected_conditions
from selenium.webdriver.support.wait import WebDriverWait
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.common.desired_capabilities import DesiredCapabilities
from selenium.webdriver.support import expected_conditions as EC

import pandas as pd
from pprint import pprint
import os

from Request import Request

# openpyxl
# geckodriver bc of Mozilla


# Выходные данные должны содержать:
# Из результатов поиска в разделе Мой дом / Паспорт / Общие сведения.
# Год ввода в эксплуатацию,
# количество этажей,
# Последнее изменение анкеты,
# Серия, тип постройки здания,
# Тип дома,
# Дом признан аварийным,
# Кадастровый номер

# Из раздела Мой дом / Паспорт / Конструктивные элементы дома
# Тип перекрытий,
# Материал несущих стен
from basic_search.service import get_excel_data, get_address, get_building_info


def construct_request(req: Request, address: str):
    # cookie error
    # wait = WebDriverWait(req.driver, 3)
    # element = wait.until(
    #     EC.element_to_be_clickable(
    #         (By.CSS_SELECTOR, ".btn-cookie-submit")))

    # 1 | open | https://www.reformagkh.ru/search |  |
    req.driver.get("https://www.reformagkh.ru/search")

    try:
        req.driver.find_element(By.CSS_SELECTOR, ".btn-cookie-submit").click()
    except NoSuchElementException:
        # print('cookie button not found')
        pass
    # 2 | click | name=query |  |
    req.driver.find_element(By.NAME, "query").click()
    # 3 | type | name=query | Адрес
    req.driver.find_element(By.NAME, "query").send_keys(address)
    # 4 | click | css=.f-16:nth-child(1) |  |
    req.driver.find_element(By.CSS_SELECTOR, ".f-16:nth-child(1)").click()

    try:
        building_info = get_building_info(req)
        print(address, ' ', building_info)
    except NoSuchElementException:
        print('=== === === === === UNABLE TO FIND HOUSE WITH ADDRESS', address)

    # req.driver.close()


# def construct_request(df: pd.DataFrame):
def construct_request_(addresses):
    req = Request()
    req.setup_method()
    for a in addresses:
        address = get_address(a)
        # print(address)
        construct_request(req, address)
    req.teardown_method()


def test_selenium():
    t = Request()
    t.setup_method()
    t.teardown_method()


if __name__ == '__main__':
    foo = get_excel_data(path_to_excel_file='/Users/aydar/Desktop/поиск Работы/Тестовая выборка.xlsx')
    # test_selenium()
    construct_request_(foo)
